Resize lvm by adding a new disk to the vg
------------------------------------------

1. Ask new disk to the Windows team
-------------------------------------
Wait for the new disk
====================================================================================================================================
New disk info from SMT:
------------------------


====================================================================================================================================

Rescan scsi bus to get the new disk(s)
---------------------------------------

for D in `ls /sys/class/scsi_disk/*/device/rescan`; do echo "echo '1' > $D";done

if syntax is ok, then pipe to bash

# get new disk info from /var/log/messages
-------------------------------------------

grep -B1 -A7 "device added" /var/log/messages                            
  OR
zgrep -B1 -A7 "device added" /var/log/messages.1.gz

# If we get the disk wwid in the SMT ticket
--------------------------------------------

DISKWWID=
ll /dev/disk/by-id | grep $DISKWWID

====================================================================================================================================

2. Define new DISK variables
------------------------------

{
DEV=<dev name>  && echo     "# DEV=$DEV"   # ex. DEV=sdb
DISK=/dev/$DEV && echo      "# DISK=$DISK"
PARTITION=${DISK}1 && echo  "# PARTITION=$PARTITION"
}

3. Define variables
-------------------
# if the FS is not mounted; then mount it
{
MOUNTPOINT=     && echo "# MOUNTPOINT=$MOUNTPOINT"
VGNAME=`df -hTP $MOUNTPOINT | tail -1 | awk -F'-' '{print $1}' | awk -F'/' '{print $NF}'` && echo "# VGNAME=$VGNAME"
LVNAME=`df -hlP $MOUNTPOINT | awk '/mapper/ {print $1}'` && echo "# LVNAME=$LVNAME"
}

4. Fetch current status
------------------------
{
vgs $VGNAME
vgdisplay $VGNAME -v | egrep 'Physical|PV Name|Volume group|VG Size'
pvs | egrep "PV|$VGNAME"
df -hTP  $LVNAME
ls -1d  /sys/class/scsi_device/*/device/block/$DEV --color=no | sort -t"/" -k7
}

5. Format the new disk
-----------------------
echo $DISK
fdisk -l $DISK
# get current in-memory partition table
cat /proc/partitions | grep $DEV

fdisk  $DISK   # create partition on the whole disk
# Answers:
-----------
n       # add a new partition
p       # primary partition (1-4)
1       # Partition number (1-4): choose 1
1	# First cylinder (1-130541, default 1)
<cr>    # Last cylinder, +cylinders or +size{K,M,G} (1-nnn, default nnn): use default value for the last cylinder (whole disk)
t       # change system partition type to 8e (Linux LVM)
p       # print partition table and double-check
w       # if OK, then write down the partition table to the disk

  OR

echo "parted -a optimal -s $DISK mklabel msdos unit % mkpart primary  0 100"

fdisk -l $DISK
parted $DISK print

# inform the OS of partition table changes
partprobe -d #  dry-run
partprobe
cat /proc/partitions | grep $DEV

6.  Create the new physical volume
------------------------------------
echo $PARTITION $VGNAME
pvcreate $PARTITION
pvs $PARTITION

7.  Extend the volume group
-----------------------------
pvs | egrep "PV|$VGNAME"
vgs $VGNAME && vgextend $VGNAME $PARTITION && vgs $VGNAME 
pvs | egrep "PV|$VGNAME"

8.  Extend the logical volume
--------------------------------
echo  $VGNAME $LVNAME
df -hP $LVNAME 
vgs $VGNAME
time lvresize -l +100%FREE $LVNAME -r
df -hP $LVNAME
lvdisplay $LVNAME | egrep "Name|Path|Size"


====================================================================================================================================
====================================================================================================================================
====================================================================================================================================


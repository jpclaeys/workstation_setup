#!/bin/sh

#
# Generated by scsnapshot on Fri Mar 21 12:18:33 2008
#

SCRGADM=/usr/cluster/bin/scrgadm

# User access right checking: `resource.modify`
#----------------------------------------------

echo "[INFO] : Check credential for script running"
AUTHS=`/usr/bin/auths`
if [      \( -z "`echo $AUTHS | grep 'solaris\.cluster\.resource\.modify'`" \) \
       -a \( -z "`echo $AUTHS | grep 'solaris\.cluster\.resource\.\*'`" \) \
       -a \( -z "`echo $AUTHS | grep 'solaris\.cluster\.\*'`" \) \
       -a \( -z "`echo $AUTHS | grep 'solaris\.\*'`" \) ]; then
  echo "`basename $0` : Not authorized to run this command."
  echo "Minimal access rights are 'solaris.cluster.resources.modify'."
  exit 3
fi

fflag=
while getopts f name
do
  case $name in
    f) fflag=1;;
    ?) echo "Usage Error:"
       echo "`basename $0` [-f]"
       exit 1;;
  esac
done

# Command wrapper
#----------------

run_cmd() {
  cmd=$1
  echo "Running: $cmd"
  eval $cmd
  ec=$?
  if [ $ec -ne 0 ]; then
    echo "... ERROR: Exit status is: $ec"
    [ -z "$fflag" ] && exit 1
  fi
}

# Software version and architecture consistency check
#----------------------------------------------------

echo "[INFO] : Check software version and architecture consistency"
if [ -z "$fflag" ]; then
  LOCAL_OS_VERSION=`/usr/bin/uname -r 2>/dev/null`
  LOCAL_ARCH=`/usr/bin/uname -p 2>/dev/null`
  LOCAL_SC_VERSION=`/usr/cluster/bin/scinstall -p 2>/dev/null | /usr/bin/head -1`
  if [ "$LOCAL_SC_VERSION" != "3.1u4" -o "$LOCAL_OS_VERSION" != "5.10" -o "$LOCAL_ARCH" != "sparc" ]; then
    echo "This script has been generated on a sparc cluster running Solaris 5.10 and SunCluster version '3.1u4'"
    echo "while the local cluster is running on $LOCAL_ARCH machine Solaris $LOCAL_OS_VERSION and SunCluster version $LOCAL_SC_VERSION."
    echo "This message is to warn you that this inconsistency might lead to errors."
    echo "You can force the execution by running the script with the -f force flag:"
    echo "	`basename $0` -f"
    exit 1
  fi
else
  echo "You're running this script using the force mode"
fi


# Resource Type presence checking
#--------------------------------

echo "[INFO] : Resource Type presence checking:"

# Each RT in the list below consists of 3 colon separated fields: 
# name, version, and default rtr directory. 
# If the rtr file for a particular RT is not located in the default directory, 
# you must edit the corresponding field 
RTLIST="SUNW.HAStoragePlus:2:/usr/cluster/lib/rgm/rtreg \
        SUNW.gds:5:/usr/cluster/lib/rgm/rtreg"
MISSING=
RT_REGISTRATION_LIST=
for each in $RTLIST; do
  RTNAME=`echo $each | /usr/bin/cut -f 1 -d ":"`
  RTVERSION=`echo $each | /usr/bin/cut -f 2 -d ":"`
  RT_DEFAULT_RTRDIR=`echo $each | /usr/bin/cut -f 3 -d ":"`

  if [ $RTVERSION = "1.0" ]; then 
    /usr/cluster/bin/scha_resourcetype_get -O START -T $RTNAME >/dev/null 2>&1 
  else 
    /usr/cluster/bin/scha_resourcetype_get -O START -T $RTNAME:$RTVERSION >/dev/null 2>&1 
  fi 
  if [ $? -eq 0 ]; then 
    # This RT is already registered, so continue and don't register it later 
    continue 
  else 
    # This RT is not yet registered, so add it to list of RTs to be registered 
    RT_REGISTRATION_LIST="$RT_REGISTRATION_LIST $each" 
  fi 
  if [ -z "`\grep RT_VERSION ${RT_DEFAULT_RTRDIR}/${RTNAME}* 2>/dev/null | \grep $RTVERSION 2>/dev/null`" ]; then 
    MISSING="$MISSING $RTNAME:$RTVERSION"
  fi
done
if [ ! -z "$MISSING" ]; then
  echo "The Resource types listed below are not installed on this machine."
  echo "Please install them before trying to run this script again:"
  echo "$MISSING"
  exit 1
fi


# Resource Type definitions
#--------------------------

echo "[INFO] : Register needed Resource Types:"
installed_on_nodes=""
command_string=
for each in $RT_REGISTRATION_LIST; do 
  RTNAME=`echo $each | /usr/bin/cut -f 1 -d ":"` 
  RT_DEFAULT_RTRDIR=`echo $each | /usr/bin/cut -f 3 -d ":"` 
  command_string="$SCRGADM -a -t $RTNAME -f ${RT_DEFAULT_RTRDIR}/${RTNAME}" 
  for type in $installed_on_nodes; do 
    rt_name=`echo $type | /usr/bin/cut -f 1 -d ":"` 
    nodes=`echo $type | /usr/bin/cut -f 2 -d ":"` 
    if [ $rt_name = $RTNAME ]; then 
       command_string="$command_string -h $nodes" 
    fi 
  done 
  run_cmd "$command_string" 
done 

# Resource group definitions
#---------------------------

echo "[INFO] : Add new Resource Group definitions:"

# gridZ-rg
run_cmd "$SCRGADM -a -g gridZ-rg -h \"osiris\" -y rg_project_name=\"default\" -y rg_mode=\"Failover\""

# END

# orwellZ-rg
run_cmd "$SCRGADM -a -g orwellZ-rg -h \"osiris\" -y rg_project_name=\"default\" -y rg_mode=\"Failover\""

# END

# infra-srvZ-rg
run_cmd "$SCRGADM -a -g infra-srvZ-rg -h \"osiris\" -y rg_project_name=\"default\" -y rg_mode=\"Failover\""

# END

# Resource definitions
#---------------------

echo "[INFO] : Add new Resource definitions:"

# stor-infra-srvZ-rs
run_cmd "$SCRGADM -a -j stor-infra-srvZ-rs -g infra-srvZ-rg -t SUNW.HAStoragePlus:2 -y resource_project_name=\"default\" -x filesystemmountpoints=\"/zones/infra-srv\""

# END

# stor-orwellZ-rs
run_cmd "$SCRGADM -a -j stor-orwellZ-rs -g orwellZ-rg -t SUNW.HAStoragePlus:2 -y resource_project_name=\"default\" -x filesystemmountpoints=\"/zones/orwell\""

# END

# stor-gridZ-rs
run_cmd "$SCRGADM -a -j stor-gridZ-rs -g gridZ-rg -t SUNW.HAStoragePlus:2 -y resource_project_name=\"default\" -x filesystemmountpoints=\"/zones/grid_pz\""

# END

# zone-infra-srvZ-rs
run_cmd "$SCRGADM -a -j zone-infra-srvZ-rs -g infra-srvZ-rg -t SUNW.gds:5 -y resource_project_name=\"default\" -y resource_dependencies=\"stor-infra-srvZ-rs\" -x stop_signal=\"9\" -x network_aware=\"FALSE\" -x start_command=\"/opt/SUNWsczone/sczbt/bin/start_sczbt -R zone-infra-srvZ-rs -G infra-srvZ-rg -P /etc/zoneagentparams\" -x stop_command=\"/opt/SUNWsczone/sczbt/bin/stop_sczbt -R zone-infra-srvZ-rs -G infra-srvZ-rg -P /etc/zoneagentparams\" -x probe_command=\"/opt/SUNWsczone/sczbt/bin/probe_sczbt -R zone-infra-srvZ-rs -G infra-srvZ-rg -P /etc/zoneagentparams\""

# END

# zone-orwellZ-rs
run_cmd "$SCRGADM -a -j zone-orwellZ-rs -g orwellZ-rg -t SUNW.gds:5 -y resource_project_name=\"default\" -y resource_dependencies=\"stor-orwellZ-rs\" -x stop_signal=\"9\" -x network_aware=\"FALSE\" -x start_command=\"/opt/SUNWsczone/sczbt/bin/start_sczbt -R zone-orwellZ-rs -G orwellZ-rg -P /etc/zoneagentparams\" -x stop_command=\"/opt/SUNWsczone/sczbt/bin/stop_sczbt -R zone-orwellZ-rs -G orwellZ-rg -P /etc/zoneagentparams\" -x probe_command=\"/opt/SUNWsczone/sczbt/bin/probe_sczbt -R zone-orwellZ-rs -G orwellZ-rg -P /etc/zoneagentparams\""

# END

# zone-gridZ-rs
run_cmd "$SCRGADM -a -j zone-gridZ-rs -g gridZ-rg -t SUNW.gds:5 -y resource_project_name=\"default\" -y resource_dependencies=\"stor-gridZ-rs\" -x stop_signal=\"9\" -x network_aware=\"FALSE\" -x start_command=\"/opt/SUNWsczone/sczbt/bin/start_sczbt -R zone-gridZ-rs -G gridZ-rg -P /etc/zoneagentparams\" -x stop_command=\"/opt/SUNWsczone/sczbt/bin/stop_sczbt -R zone-gridZ-rs -G gridZ-rg -P /etc/zoneagentparams\" -x probe_command=\"/opt/SUNWsczone/sczbt/bin/probe_sczbt -R zone-gridZ-rs -G gridZ-rg -P /etc/zoneagentparams\""

# END
